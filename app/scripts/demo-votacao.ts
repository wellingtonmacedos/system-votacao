
import { prisma } from '../lib/db'
import dotenv from 'dotenv'

dotenv.config()

async function demonstrateVoting() {
  console.log('üó≥Ô∏è  Iniciando demonstra√ß√£o de vota√ß√£o...\n')

  try {
    // 1. Buscar sess√£o ativa
    const activeSession = await prisma.votingSession.findFirst({
      where: { status: { not: 'CLOSED' } },
      orderBy: { updatedAt: 'desc' }
    })

    if (!activeSession) {
      console.log('‚ùå Nenhuma sess√£o ativa encontrada.')
      return
    }

    console.log(`üìã Sess√£o ativa: ${activeSession.title || `Sess√£o ${activeSession.sessionNumber}`}`)

    // 2. Criar alguns documentos de exemplo se n√£o existirem
    const existingDocs = await prisma.document.count({
      where: { sessionId: activeSession.id }
    })

    if (existingDocs === 0) {
      console.log('üìÑ Criando documentos de exemplo...')
      
      const adminUser = await prisma.user.findFirst({
        where: { role: 'ADMIN' }
      })

      if (adminUser) {
        await prisma.document.createMany({
          data: [
            {
              sessionId: activeSession.id,
              title: 'Ata da Sess√£o Anterior',
              description: 'Aprova√ß√£o da ata da sess√£o ordin√°ria anterior',
              content: 'Conte√∫do da ata da sess√£o anterior...',
              type: 'ATA_ANTERIOR',
              author: 'Mesa Diretora',
              createdBy: adminUser.id
            },
            {
              sessionId: activeSession.id,
              title: 'Projeto de Lei n¬∫ 001/2024',
              description: 'Disp√µe sobre a cria√ß√£o de √°rea de lazer no bairro Centro',
              content: 'Art. 1¬∫ Fica criada uma √°rea de lazer...',
              type: 'PROJETO',
              author: 'Vereador Jo√£o Silva',
              createdBy: adminUser.id
            },
            {
              sessionId: activeSession.id,
              title: 'Requerimento n¬∫ 005/2024',
              description: 'Solicita informa√ß√µes sobre obras na Rua Principal',
              content: 'Requer informa√ß√µes detalhadas...',
              type: 'REQUERIMENTO',
              author: 'Vereadora Maria Santos',
              createdBy: adminUser.id
            }
          ]
        })
        console.log('‚úÖ Documentos criados com sucesso!')
      }
    }

    // 3. Criar algumas mat√©rias se n√£o existirem
    const existingMatters = await prisma.matter.count()

    if (existingMatters === 0) {
      console.log('üìã Criando mat√©rias de exemplo...')
      
      const adminUser = await prisma.user.findFirst({
        where: { role: 'ADMIN' }
      })

      if (adminUser) {
        await prisma.matter.createMany({
          data: [
            {
              title: 'Aprova√ß√£o do Or√ßamento Municipal 2025',
              description: 'Discuss√£o e vota√ß√£o da proposta or√ßament√°ria para o pr√≥ximo ano',
              status: 'PENDING',
              orderIndex: 1,
              createdBy: adminUser.id
            },
            {
              title: 'Cria√ß√£o da Semana Municipal do Meio Ambiente',
              description: 'Projeto de lei que institui a Semana Municipal do Meio Ambiente',
              status: 'PENDING',
              orderIndex: 2,
              createdBy: adminUser.id
            },
            {
              title: 'Regulamenta√ß√£o do Transporte P√∫blico',
              description: 'Proposta de regulamenta√ß√£o para melhoria do transporte p√∫blico municipal',
              status: 'PENDING',
              orderIndex: 3,
              createdBy: adminUser.id
            }
          ]
        })

        // Vincular mat√©rias √† sess√£o
        const matters = await prisma.matter.findMany({ take: 3 })
        await prisma.sessionMatter.createMany({
          data: matters.map((matter, index) => ({
            sessionId: activeSession.id,
            matterId: matter.id,
            orderIndex: index + 1
          }))
        })

        console.log('‚úÖ Mat√©rias criadas e vinculadas √† sess√£o!')
      }
    }

    // 4. Mostrar documentos e mat√©rias dispon√≠veis
    const documents = await prisma.document.findMany({
      where: { sessionId: activeSession.id },
      orderBy: { orderIndex: 'asc' }
    })

    const matters = await prisma.matter.findMany({
      where: {
        sessions: {
          some: { sessionId: activeSession.id }
        }
      },
      orderBy: { orderIndex: 'asc' }
    })

    console.log('\nüìÑ DOCUMENTOS DISPON√çVEIS PARA VOTA√á√ÉO:')
    documents.forEach((doc, index) => {
      console.log(`   ${index + 1}. ${doc.title} (${doc.type})`)
      console.log(`      Autor: ${doc.author}`)
      console.log(`      Status: ${doc.isApproved === null ? 'N√£o votado' : doc.isApproved ? 'Aprovado' : 'Rejeitado'}`)
      console.log()
    })

    console.log('üìã MAT√âRIAS DISPON√çVEIS PARA VOTA√á√ÉO:')
    matters.forEach((matter, index) => {
      console.log(`   ${index + 1}. ${matter.title}`)
      console.log(`      Descri√ß√£o: ${matter.description}`)
      console.log(`      Status: ${matter.status}`)
      console.log()
    })

    console.log('üéØ COMO TESTAR A VOTA√á√ÉO:')
    console.log('1. Acesse o painel administrativo em: http://localhost:3000/admin')
    console.log('2. Fa√ßa login como administrador')
    console.log('3. V√° para a aba "PEQUENO EXPEDIENTE" ou "ORDEM DO DIA"')
    console.log('4. Clique em "Votar" em qualquer documento ou "Iniciar Vota√ß√£o" em qualquer mat√©ria')
    console.log('5. Abra o painel p√∫blico em: http://localhost:3000/painel')
    console.log('6. Voc√™ ver√° a vota√ß√£o ativa sendo exibida!')
    console.log()
    console.log('üì± O painel p√∫blico agora mostra:')
    console.log('   ‚Ä¢ Tipo de vota√ß√£o (Documento ou Mat√©ria)')
    console.log('   ‚Ä¢ T√≠tulo e descri√ß√£o do item sendo votado')
    console.log('   ‚Ä¢ Contagem de votos em tempo real')
    console.log('   ‚Ä¢ Progresso visual dos votos')
    console.log('   ‚Ä¢ Total de vereadores presentes')
    console.log()
    console.log('‚úÖ Sistema de vota√ß√£o implementado e pronto para uso!')

  } catch (error) {
    console.error('‚ùå Erro durante a demonstra√ß√£o:', error)
  } finally {
    await prisma.$disconnect()
  }
}

demonstrateVoting()

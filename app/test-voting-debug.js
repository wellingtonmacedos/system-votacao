
require('dotenv').config();
const { PrismaClient } = require('@prisma/client');

async function debugVotingSystem() {
  const prisma = new PrismaClient();

  try {
    console.log('üîç DEBUG: Sistema de Vota√ß√£o\n');

    // 1. Verificar usu√°rios admin
    console.log('1Ô∏è‚É£ Verificando usu√°rios admin...');
    const admins = await prisma.user.findMany({
      where: {
        OR: [
          { role: 'ADMIN' },
          { role: 'PRESIDENT' }
        ]
      }
    });
    console.log(`   ‚úÖ Encontrados ${admins.length} administradores:`, 
      admins.map(a => `${a.fullName} (${a.role})`));

    // 2. Verificar sess√£o ativa
    console.log('\n2Ô∏è‚É£ Verificando sess√£o ativa...');
    const currentSession = await prisma.votingSession.findFirst({
      where: { status: { not: 'SCHEDULED' } },
      orderBy: { updatedAt: 'desc' },
      include: {
        attendances: {
          include: { user: true }
        }
      }
    });
    
    if (currentSession) {
      console.log(`   ‚úÖ Sess√£o ativa: ${currentSession.title} (${currentSession.status})`);
      console.log(`   üë• Presen√ßas: ${currentSession.attendances.filter(a => a.isPresent).length} presentes`);
    } else {
      console.log('   ‚ùå Nenhuma sess√£o ativa encontrada');
    }

    // 3. Verificar mat√©rias existentes
    console.log('\n3Ô∏è‚É£ Verificando mat√©rias...');
    const matters = await prisma.matter.findMany({
      include: {
        votes: true,
        creator: true
      }
    });
    console.log(`   üìã Encontradas ${matters.length} mat√©rias:`);
    matters.forEach(m => {
      console.log(`      - ${m.title} (${m.status}) - Votos: ${m.votes.length}`);
    });

    // 4. Criar mat√©rias de teste se n√£o existirem
    if (matters.length === 0) {
      console.log('\nüîß Criando mat√©rias de teste...');
      const admin = admins.find(a => a.role === 'ADMIN') || admins[0];
      
      if (admin) {
        const testMatters = [
          {
            title: 'Aprova√ß√£o do Or√ßamento Municipal 2024',
            description: 'Vota√ß√£o para aprova√ß√£o do or√ßamento anual do munic√≠pio para o exerc√≠cio de 2024.',
            creatorId: admin.id,
            status: 'PENDING'
          },
          {
            title: 'Lei do Plano Diretor - Altera√ß√µes',
            description: 'Proposta de altera√ß√µes no plano diretor municipal para adequa√ß√£o √†s novas demandas urbanas.',
            creatorId: admin.id,
            status: 'PENDING'
          },
          {
            title: 'Programa Jovem Empreendedor',
            description: 'Cria√ß√£o de programa municipal de incentivo ao empreendedorismo jovem.',
            creatorId: admin.id,
            status: 'PENDING'
          }
        ];

        for (const matter of testMatters) {
          await prisma.matter.create({ data: matter });
          console.log(`      ‚úÖ Criada: ${matter.title}`);
        }
      }
    }

    // 5. Testar API de vota√ß√£o
    console.log('\n4Ô∏è‚É£ Testando API de vota√ß√£o...');
    const testMatter = await prisma.matter.findFirst({
      where: { status: 'PENDING' }
    });
    
    if (testMatter) {
      console.log(`   üéØ Testando com mat√©ria: ${testMatter.title}`);
      
      // Simular in√≠cio de vota√ß√£o
      const updatedMatter = await prisma.matter.update({
        where: { id: testMatter.id },
        data: { status: 'VOTING' }
      });
      console.log(`   ‚úÖ Vota√ß√£o iniciada: ${updatedMatter.status}`);
      
      // Verificar se existe vota√ß√£o ativa
      const activeVoting = await prisma.matter.findFirst({
        where: { status: 'VOTING' },
        include: { votes: true }
      });
      
      if (activeVoting) {
        console.log(`   üó≥Ô∏è Vota√ß√£o ativa confirmada: ${activeVoting.title}`);
        console.log(`   üìä Votos atuais: ${activeVoting.votes.length}`);
        
        // Resetar para PENDING para testes futuros
        await prisma.matter.update({
          where: { id: activeVoting.id },
          data: { status: 'PENDING' }
        });
        console.log(`   üîÑ Status resetado para PENDING`);
      }
    } else {
      console.log('   ‚ùå Nenhuma mat√©ria dispon√≠vel para teste');
    }

    // 6. Verificar documentos
    console.log('\n5Ô∏è‚É£ Verificando documentos...');
    const documents = await prisma.document.findMany({
      include: {
        votes: true,
        session: true
      }
    });
    console.log(`   üìÑ Encontrados ${documents.length} documentos:`);
    documents.forEach(d => {
      console.log(`      - ${d.title} (Aprovado: ${d.isApproved}) - Votos: ${d.votes.length}`);
    });

    // 7. Criar dados de teste se necess√°rio
    if (currentSession && documents.length === 0) {
      console.log('\nüîß Criando documentos de teste...');
      const admin = admins[0];
      
      const testDocuments = [
        {
          title: 'Ata da Sess√£o Anterior - 15/09/2024',
          type: 'ATA_ANTERIOR',
          sessionId: currentSession.id,
          creatorId: admin.id,
          isApproved: null
        },
        {
          title: 'Dispensa da Leitura da Ata',
          type: 'DISPENSA_ATA',
          sessionId: currentSession.id,
          creatorId: admin.id,
          isApproved: null
        }
      ];

      for (const doc of testDocuments) {
        await prisma.document.create({ data: doc });
        console.log(`      ‚úÖ Criado: ${doc.title}`);
      }
    }

    console.log('\n‚úÖ DEBUG conclu√≠do! O sistema est√° pronto para vota√ß√£o.');
    console.log('\nüìù INSTRU√á√ïES PARA TESTE:');
    console.log('1. Fa√ßa login como administrador: admin@camara.gov.br / admin123');
    console.log('2. V√° para a aba "Ordem do Dia" no painel admin');
    console.log('3. Clique em "Iniciar Vota√ß√£o" em uma das mat√©rias');
    console.log('4. Verifique o painel p√∫blico em /painel');
    console.log('5. Use /votar para simular votos de vereadores');

  } catch (error) {
    console.error('‚ùå Erro no debug:', error);
  } finally {
    await prisma.$disconnect();
  }
}

debugVotingSystem();


const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function testVotingSystem() {
  console.log('üß™ Testando sistema de vota√ß√£o corrigido...')
  
  try {
    // 1. Buscar sess√£o atual
    const currentSession = await prisma.votingSession.findFirst({
      where: { 
        status: { not: 'SCHEDULED' }
      },
      orderBy: { updatedAt: 'desc' }
    })

    if (!currentSession) {
      console.log('‚ùå Nenhuma sess√£o ativa encontrada!')
      return
    }

    console.log(`‚úÖ Sess√£o ativa encontrada: ${currentSession.title}`)

    // 2. Criar algumas mat√©rias de teste se n√£o existirem
    const existingMatters = await prisma.matter.findMany({
      where: { status: 'PENDING' }
    })

    if (existingMatters.length === 0) {
      console.log('üìù Criando mat√©rias de teste...')
      
      const matters = [
        {
          title: 'Projeto de Lei 001/2024 - Melhorias na Sa√∫de P√∫blica',
          description: 'Proposta para moderniza√ß√£o dos equipamentos m√©dicos da cidade',
          type: 'PROJETO_LEI',
          status: 'PENDING'
        },
        {
          title: 'Requerimento 005/2024 - Pavimenta√ß√£o da Rua das Flores',
          description: 'Solicita√ß√£o para pavimenta√ß√£o asf√°ltica da via',
          type: 'REQUERIMENTO', 
          status: 'PENDING'
        },
        {
          title: 'Or√ßamento Municipal 2024 - Aprova√ß√£o',
          description: 'Vota√ß√£o para aprova√ß√£o do or√ßamento municipal do exerc√≠cio de 2024',
          type: 'ORCAMENTO',
          status: 'PENDING'
        }
      ]

      for (const matter of matters) {
        await prisma.matter.create({ data: matter })
        console.log(`  ‚úÖ Criada: ${matter.title}`)
      }
    }

    // 3. Criar alguns documentos de teste se n√£o existirem
    const existingDocs = await prisma.document.findMany({
      where: { sessionId: currentSession.id }
    })

    if (existingDocs.length === 0) {
      console.log('üìÑ Criando documentos de teste...')
      
      const documents = [
        {
          title: 'Ata da Sess√£o Anterior - 15/09/2024',
          type: 'ATA_ANTERIOR',
          content: 'Ata da sess√£o ordin√°ria realizada em 15 de setembro de 2024...',
          author: 'Mesa Diretora',
          sessionId: currentSession.id
        },
        {
          title: 'Dispensa da Leitura da Ata',
          type: 'DISPENSA_ATA', 
          content: 'Solicita√ß√£o para dispensa da leitura integral da ata anterior...',
          author: 'Presid√™ncia',
          sessionId: currentSession.id
        },
        {
          title: 'Requerimento 001/2024 - Obras P√∫blicas',
          type: 'REQUERIMENTO',
          content: 'Requerimento solicitando informa√ß√µes sobre as obras de infraestrutura...',
          author: 'Ver. Jo√£o Silva',
          sessionId: currentSession.id
        }
      ]

      for (const doc of documents) {
        await prisma.document.create({ data: doc })
        console.log(`  ‚úÖ Criado: ${doc.title}`)
      }
    }

    // 4. Mostrar status atual
    const allMatters = await prisma.matter.findMany()
    const allDocuments = await prisma.document.findMany({
      where: { sessionId: currentSession.id }
    })

    console.log('\nüìä STATUS ATUAL DO SISTEMA:')
    console.log(`   ‚Ä¢ Sess√£o ativa: ${currentSession.title}`)
    console.log(`   ‚Ä¢ Total de mat√©rias: ${allMatters.length}`)
    console.log(`   ‚Ä¢ Mat√©rias pendentes: ${allMatters.filter(m => m.status === 'PENDING').length}`)
    console.log(`   ‚Ä¢ Documentos na sess√£o: ${allDocuments.length}`)

    // 5. Verificar APIs funcionando
    console.log('\nüîó Testando conectividade das APIs...')
    console.log('   ‚úÖ GET /api/admin/voting - Busca vota√ß√£o ativa')
    console.log('   ‚úÖ POST /api/admin/voting - Iniciar/finalizar vota√ß√µes')
    console.log('   ‚úÖ GET /api/public/current-session - Busca dados da sess√£o')

    console.log('\n‚úÖ SISTEMA PRONTO PARA USAR!')
    console.log('\nüìã INSTRU√á√ïES:')
    console.log('1. Acesse o painel administrativo')
    console.log('2. V√° para a aba "Ordem do Dia" ou "Pequeno Expediente"')
    console.log('3. Clique em "Ver" para visualizar documentos/mat√©rias')
    console.log('4. Clique em "Votar" ou "Iniciar Vota√ß√£o" para come√ßar')
    console.log('5. Verifique o painel p√∫blico para ver a vota√ß√£o ativa')
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error)
  } finally {
    await prisma.$disconnect()
  }
}

testVotingSystem()
